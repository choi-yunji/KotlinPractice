package ex_Class
/* 코틀린에서의 클래스 선언
   class 클래스이름 {
      프로퍼티
   }
   자바에서 public 클래스를 선언하려면 클래스 이름이 파일 이름과 같아야 하고,
   public 클래스는 파일 하나당 한개만 존재할 수 있다.
   하지만 코틀린에서는 클래스 이름이 파일 이름과 같아야 할 의무가 없으며, 한 파일 내에 여러 개의
   public 클래스를 선언할 수 도 있다.
 */

class Person
{
    var name: String = ""
    var age: Int = 0
}

fun main(args: Array<String>)
{
    val person: Person
    person = Person() // 객체를 생성할때는 new 없이 생성자만 호출하면 된다.
    person.name = "홍길동"
    person.age = 36

    val person2 = Person()
    person.name = "김미영"
    person.age = 29

    val person3 = Person()
    person.name = "John"
    person.age = 52
}

/** 클래스는 객체를 찍어내기 위한 설계도
 * 클래스 안에 포함된 프로퍼티는 이 클래스대로 객체를 만들면 객체 안에 이렇게 생긴
 * 프로퍼티가 들어갈 것 이라고 알려주기 위한 모형변수이다
 * 그래서 클래스를 선언한다해도 클래스 속의 프로퍼티가 곧바로 생성되지는 않는다
 * 클래스로부터 생성된 객체는 인스턴스라고 부르기도 한다.**/

/* 객체의 타입
    object  키워드로 객체를 일일이 생성했을때는 객체의 타입에 이름이 없었다.
    심지어 object 키워드로 객체를 여러개 생성하면 객체의 형태가 완전히 같아도 서로 다른 타입으로 인식된다.
    반면에 클래스로 생성된 개개체는 공장에서 찍혀 나오는 공산품과 같기 떄문에 모두 동일한 타입을 갖는다.
 */

/* 코틀린의 기본 접근지정자
    코틀린의 기본 접근지정자는, 기본값이 default 인 자바와는 달리 public 이다.
 */

/* 참조 변수 사용시 주의점
    참조 변수를 초기화하지 않은 채 프로퍼티에 접근하면 오류가 발생한다.
    참조변수가 어떤 객체를 가르키고 있는지 알 수 없기 때문이다.
 */